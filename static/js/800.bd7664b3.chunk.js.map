{"version":3,"file":"static/js/800.bd7664b3.chunk.js","mappings":"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","sources":["comp/Wheel.jsx","tools/timer.js","comp/Words.jsx","tools/dash.js","tools/shuffle.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nconst words = ['дреха', 'глътка', 'дъвча', 'забода', 'заловя', 'вред'];\r\n\r\nfunction Wheel() {\r\n    const [showFullWords, setShowFullWords] = useState(false);\r\n  \r\n    // Create a new array with only the first and last letters of each word\r\n    const abbreviatedWords = words.map(word => {\r\n      const firstLetter = word.charAt(0);\r\n      const lastLetter = word.charAt(word.length - 1);\r\n      const middleLetters = word.slice(1, -1).replace(/./g, ' ');\r\n      return `${firstLetter}${middleLetters}${lastLetter}`;\r\n    });\r\n    \r\n    return (\r\n      <div>\r\n        <button onClick={() => setShowFullWords(!showFullWords)}>\r\n          {showFullWords ? 'Hide full words' : 'Show full words'}\r\n        </button>\r\n        {showFullWords ? (\r\n          <ul>\r\n            {words.map((word, index) => (\r\n              <li key={index}>{word}</li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <ul>\r\n            {abbreviatedWords.map((word, index) => (\r\n              <li key={index}>{word}</li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Wheel;","import { useEffect, useRef, useState } from \"react\";\r\n\r\nconst useCounDownTimer = (duration, setGen, gen) => {\r\n  const [timeLeft, setTimeLeft] = useState(duration);\r\n  const timerRef = useRef(null);\r\n  useEffect(() => {\r\n    timerRef.current = setInterval(() => {\r\n      setTimeLeft((timeLeft) => timeLeft - 1);\r\n    }, 1000);\r\n    return () => clearInterval(timerRef.current);\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    if (timeLeft <= 0) {\r\n      clearInterval(timerRef);\r\n      setTimeLeft(duration)\r\n    }\r\n  }, [timeLeft]);\r\n  useEffect(()=>{\r\n    setTimeLeft(duration)\r\n  },[gen])\r\n\r\n  return timeLeft\r\n};\r\n\r\nexport default useCounDownTimer","import React, {\r\n  useContext,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport \"../styles/words.css\";\r\nimport { ApiConext } from \"../axios/AxiosContenxt\";\r\nimport { getDash } from \"../tools/dash\";\r\nimport { getRandom } from \"../tools/random\";\r\nimport { shuffleArray } from \"../tools/shuffle\";\r\nimport Wheel from \"./Wheel\";\r\nimport useCounDownTimer from \"../tools/timer\";\r\nimport { getAllCombinations } from \"../tools/new\";\r\nimport { ScaleLoader } from \"react-spinners\";\r\nconst Words = ({ pass, value }) => {\r\n  const { words, isLoading, setIsLoading, trigger, setTrigger } =\r\n    useContext(ApiConext);\r\n  const [gen, setGen] = useState(false);\r\n  const [filt, setFilt] = useState([]);\r\n  const [load, setLoad] = useState(false);\r\n  const [printDash, setPrintDash] = useState([]);\r\n  const [collect, setCollect] = useState([]);\r\n  const [time, setTime] = useState(0);\r\n  const [shuff, setShuff] = useState([]);\r\n  const [newShuff, setNewShuff] = useState([]);\r\n  const [resetTimer, setResetTimer] = useState(false);\r\n  const [lett, setLett] = useState([]);\r\n  // const [duration, setDuration] = useState(10)\r\n  const duration = 180;\r\n  const timeLeft = useCounDownTimer(duration, setGen, resetTimer);\r\n  const minutes = Math.floor(timeLeft / 60);\r\n  const seconds = timeLeft % 60;\r\n  const secDuration = 30;\r\n  const secondLeft = useCounDownTimer(secDuration, resetTimer);\r\n  const [resetSec, setResetSec] = useState(false);\r\n  const [longestLenght, setLongestLenght] = useState();\r\n  const [newSet, setNewSet] = useState([]);\r\n  const [isLoadWord, setIsLoadWord] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setIsLoadWord(true);\r\n    isLoadWord && setFilt([]);\r\n    isLoadWord && setPrintDash([]);\r\n    isLoadWord && setCollect([]);\r\n\r\n    setShuff(words[1]);\r\n    setIsLoadWord(true);\r\n\r\n    setCollect([]);\r\n  }, [isLoading, trigger]);\r\n\r\n  useEffect(() => {\r\n    words[0] && setFilt(words[0]);\r\n  }, [isLoading, trigger]);\r\n  useEffect(() => {\r\n    filt.length !== 0 && getDash(filt, setPrintDash);\r\n    filt.length !== 0 && setIsLoadWord(false);\r\n    const longest = filt?.reduce((acc, curr) => {\r\n      return curr.length >= acc.length ? curr : acc;\r\n    }, \"\");\r\n    filt && setLongestLenght(longest.length - 1);\r\n  }, [filt]);\r\n\r\n  useEffect(() => {\r\n    let check = value[value.length - 1];\r\n    let filtered = check?.toLowerCase();\r\n    let gessted = filt?.includes(filtered?.toLowerCase());\r\n    if (gessted) {\r\n      if (!collect.includes(filtered)) {\r\n        setCollect((prev) => [...prev, filtered]);\r\n      }\r\n    }\r\n  }, [filt, pass, value]);\r\n\r\n  useEffect(() => {\r\n    if (collect.length === filt.length && filt.length !== 0) {\r\n      const timeOut = setTimeout(() => {\r\n        setIsLoadWord(true);\r\n        setTrigger(!trigger);\r\n        setCollect([]);\r\n\r\n        setResetTimer(!resetTimer);\r\n        setTime(0);\r\n        setResetSec(!resetSec);\r\n        setIsLoading(true);\r\n      }, 4000);\r\n      return () => clearTimeout(timeOut);\r\n    }\r\n  }, [time, collect]);\r\n\r\n  useEffect(() => {\r\n    if (timeLeft === 0) {\r\n      setLongestLenght((prev) => longestLenght - 1);\r\n      setTime((prev) => time + 1);\r\n    }\r\n  }, [timeLeft, longestLenght]);\r\n\r\n\r\n  useEffect(() => {\r\n    const int = setInterval(() => {\r\n      let temp = shuffleArray(shuff);\r\n      setShuff(temp);\r\n      setResetSec(!resetSec);\r\n    }, 30000);\r\n    return () => clearInterval(int);\r\n  }, [resetSec, shuff]);\r\n\r\n  return isLoadWord ? (\r\n    <div className=\"spinner\">\r\n      <ScaleLoader height={\"150px\"} width={\"10px\"} color=\"#a14444\" />\r\n    </div>\r\n  ) : (\r\n    <div className=\"words\">\r\n      {filt?.map((item, i) => {\r\n        return (\r\n          <div key={i}>\r\n            <h2 className=\"the-word\">\r\n              {collect.includes(filt[i])\r\n                ? filt[i]\r\n                : filt[i]?.substring(0, time)}\r\n            </h2>\r\n          </div>\r\n        );\r\n      })}\r\n      <div className=\"pos-dash\">\r\n        {printDash?.map((set, i) => {\r\n          return (\r\n            <div className=\"all-dash\" key={i}>\r\n              {set.map((item, s) => {\r\n                return (\r\n                  <span key={s} className=\"single-dash\">\r\n                    {item}\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {!isLoadWord && (\r\n        <div className=\"wheel\">\r\n          <h4>Възможно е буквите да се повтарят 😁</h4>\r\n          <h5 className=\"seconds\">\r\n            {secondLeft < 10 ? \"0\" + secondLeft : secondLeft}\r\n          </h5>\r\n          {shuff?.map((item, i) => {\r\n            return (\r\n              <div key={i} className={`item i-${i}`}>\r\n                <span>{item}</span>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n      <div className=\"counter\">\r\n        {\" \"}\r\n        <h4>\r\n          {minutes} : {seconds < 10 ? \"0\" : \"\"}\r\n          {seconds}\r\n        </h4>\r\n      </div>\r\n      {longestLenght < 0 && (\r\n        <div className=\"next\">\r\n          <button\r\n            className=\"btn-next\"\r\n            onClick={() => {\r\n              setIsLoadWord(true);\r\n              // // setGen(!gen);\r\n              setIsLoading(true);\r\n              setTrigger(!trigger);\r\n              setCollect([]);\r\n              setResetTimer(!resetTimer);\r\n              setResetSec(!resetSec);\r\n              setTime(0);\r\n            }}\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Words;\r\n","export const getDash =  (filt, setPrintDash) =>  {\r\n    if (!filt) {\r\n      return;\r\n    }\r\n    const dashCount = filt?.map((word) => word?.length);\r\n    let dashHold = dashCount?.map((count) => {\r\n      let pushed = [];\r\n      const str = \"\";\r\n      for (let j = count - 1; j >= 0; j--) {\r\n        pushed?.push(str);\r\n      }\r\n      return pushed;\r\n    });\r\n     setPrintDash(dashHold);\r\n  };","export function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n       [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return  array;\r\n  }"],"names":["duration","setGen","gen","_useState","useState","_useState2","_slicedToArray","timeLeft","setTimeLeft","timerRef","useRef","useEffect","current","setInterval","clearInterval","_ref","pass","value","_useContext","useContext","ApiConext","words","isLoading","setIsLoading","trigger","setTrigger","_useState3","_useState4","filt","setFilt","_useState5","_useState6","_useState7","_useState8","printDash","setPrintDash","_useState9","_useState10","collect","setCollect","_useState11","_useState12","time","setTime","_useState13","_useState14","shuff","setShuff","_useState15","_useState16","_useState17","_useState18","resetTimer","setResetTimer","_useState19","_useState20","useCounDownTimer","minutes","Math","floor","seconds","secondLeft","_useState21","_useState22","resetSec","setResetSec","_useState23","_useState24","longestLenght","setLongestLenght","_useState25","_useState26","_useState27","_useState28","isLoadWord","setIsLoadWord","length","dashCount","map","word","count","pushed","j","push","getDash","longest","reduce","acc","curr","check","filtered","toLowerCase","includes","prev","concat","_toConsumableArray","timeOut","setTimeout","clearTimeout","int","temp","array","i","random","shuffleArray","_jsx","className","children","ScaleLoader","height","width","color","_jsxs","item","_filt$i","substring","set","s","onClick"],"sourceRoot":""}